<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>seanchann's blog</title><link>http://seanchann.github.io/</link><description></description><atom:link href="http://seanchann.github.io/feeds/mongodb.rss.xml" rel="self"></atom:link><lastBuildDate>Fri, 03 Jul 2015 00:00:00 +0800</lastBuildDate><item><title>mongodb---install</title><link>http://seanchann.github.io/mongodb-install-cn.html</link><description>&lt;p&gt;&lt;strong&gt;系统：CentOS7 + docker 1.6&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;mongodb版本： 3.0.2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本文的安装是采用docker的方式，而不是在os上安装package的方式。
&lt;a href="http://docs.mongoing.com/manual/tutorial/"&gt;package的安装方式&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在开始前，假定用户已经完成了基础环境的配置，这里主要是指docker的运行环境&lt;/p&gt;
&lt;h2&gt;安装&lt;/h2&gt;
&lt;h3&gt;运行一个mongodb&lt;/h3&gt;
&lt;p&gt;docker hub上官方的mongodb image，我们直接使用此image来运行mongodb：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;docker pull mongo
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;创建一个volume容器，保存mongo的数据以及配置：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;docker create -v /yourdir/mongo/data/db:/data/db -v /yourdir/mongo/conf/:/conf/ --name&lt;span class="o"&gt;=&lt;/span&gt;mongo-dv mongo
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;run mongodb with volume&lt;/h3&gt;
&lt;p&gt;直接指定绑定host上的文件夹：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;docker create --volumes-from&lt;span class="o"&gt;=&lt;/span&gt;mongo-dv --name mongodb -d mongo
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;自定义参数启动&lt;/h3&gt;
&lt;p&gt;docker hub上提供的官方镜像支持自定义参数启动mongodb：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;docker run -p 27017:27017 --name&lt;span class="o"&gt;=&lt;/span&gt;mongodb -d mongo  --auth
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如上所示，我们传入了--auth给run命令做为参数，相当于我们执行mongod --auth&lt;/p&gt;
&lt;p&gt;截取一段代码看看：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; -e

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="nb"&gt;set&lt;/span&gt; -- mongod &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mongod&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        chown -R mongodb /data/db

        &lt;span class="nv"&gt;numa&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;numactl --interleave=all&amp;#39;&lt;/span&gt;

        &lt;span class="nb"&gt;exec &lt;/span&gt;gosu mongodb &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;此段脚本的流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;检查参数列表中的第一个参数，偏移为0，也就是取第一个参数的第一个字符，如果是‘-’，那么在参数列表前面添加‘mongod’。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果检测到第一个参数是‘mongod’，那么将‘numactl --interleave=all’压入参数列表。在上一步中，如果传入了参数，那么就参数列表中第一个参数肯定是‘mongod’；如果没有传入参数，在Dockerfile中的CMD默认是'mongod'。因此此步肯定会执行到。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最后，我们执行压入参数列表中的命令。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;完整的启动命令&lt;/h3&gt;
&lt;p&gt;经过上面的推敲，通过docker启动mongodb的完整命令应该是：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;docker run -p 27017:27017 --volumes-from=mongo-dv --name=mongodb -d mongo --auth
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Seanchann Zhou</dc:creator><pubDate>Fri, 03 Jul 2015 00:00:00 +0800</pubDate><guid>tag:seanchann.github.io,2015-07-03:mongodb-install-cn.html</guid><category>mongodb</category></item><item><title>mongodb---Problems Summary</title><link>http://seanchann.github.io/mongodb-problems-summary-cn.html</link><description>&lt;p&gt;&lt;strong&gt;系统：CentOS7 + docker 1.6&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;mongodb版本： 3.0.2&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;WARNING:/sys/kernel/mm/transparent_hugepage/enabled or /sys/kernel/mm/transparent_hugepage/defrag is 'always'.&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;    这个问题的原因是由于内核的某些参数的配置造成的mongodb产生了警告，基于docker环境，在docker运行的host主机上：

    1. echo never &amp;gt; /sys/kernel/mm/transparent_hugepage/enabled
    2. echo never &amp;gt; /sys/kernel/mm/transparent_hugepage/defrag

    or

    1. echo never | sudo tee /sys/kernel/mm/transparent_hugepage/enabled
    2. echo never | sudo tee /sys/kernel/mm/transparent_hugepage/defrag
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;run command with db&lt;/h2&gt;
&lt;p&gt;从mongo shell执行db.runCommand()，需要添加下面的用户以及权限才能执行。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;db.createUser(
  {
    user: &amp;quot;admin&amp;quot;,
    pwd: &amp;quot;password&amp;quot;,
    roles: [ { role: &amp;quot;root&amp;quot;, db: &amp;quot;admin&amp;quot; } ]
  }
);
exit; 
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 0.0_="0.0," 18="18" _auth="&amp;quot;auth" code:="code:" errmsg:="errmsg:" failed_="failed&amp;quot;," ok:="ok:"&gt;db.auth() 错误：Error: 18&lt;/h2&gt;
&lt;p&gt;从本地mongo shell 可以正常的auth，从远端始终无法auth成功。想了又想，弄了又弄，就是不见好。&lt;/p&gt;
&lt;p&gt;后来，竟然发现是因为远端系统的mongo shell的版本太低了。这个坑有点太坑了，shell都不兼容的吗？&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Seanchann Zhou</dc:creator><pubDate>Fri, 03 Jul 2015 00:00:00 +0800</pubDate><guid>tag:seanchann.github.io,2015-07-03:mongodb-problems-summary-cn.html</guid><category>mongodb</category></item><item><title>mongodb---user</title><link>http://seanchann.github.io/mongodb-user-cn.html</link><description>&lt;p&gt;&lt;strong&gt;系统：CentOS7 + docker 1.6&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;mongodb版本： 3.0.2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;安装工作完成后，整个的mongodb运行起来后，在开始工作前，首先应该为我们的mongodb配置适当的用户以及其权限。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;注意下，网上大多数的直接进入命令行,执行：&lt;/em&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;use admin
db.adduser(&amp;quot;test&amp;quot;,&amp;quot;123&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;上面这种方式在3.0的版本上是行不通的&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;添加管理员用户&lt;/h2&gt;
&lt;p&gt;通过docker首先启动不带--auth的mongodb：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;docker run --volumes-from=mongodb-dv --name mongodb -d mongo
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://seanchann.github.io/mongodb-install-cn.html"&gt;更详细的对安装的描述&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;进入mongo shell&lt;/h3&gt;
&lt;h3&gt;添加管理员用户：&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;use admin
db.createUser(
{
      user: &amp;quot;admin&amp;quot;,
      pwd: &amp;quot;admin&amp;quot;,
      roles: [ { role: &amp;quot;userAdminAnyDatabase&amp;quot;, db: &amp;quot;admin&amp;quot; } ]
})
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;roles字段的说明：添加管理员用户的时候，提供了两种roles：userAdmin以及userAdminAnyDatabase&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;userAdmin：提供去创建和修改当前数据库的roles以及user。这个role也间接的提供了superuser给我们去访问数据库或者其他，如果当前数据库是admin 数据库，cluster数据库。userAdmin role允许用户去更改其他用户的权限，当然也包括他们自己。它支持操作有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;changeCustomData&lt;/li&gt;
&lt;li&gt;changePassword&lt;/li&gt;
&lt;li&gt;createRole&lt;/li&gt;
&lt;li&gt;createUser&lt;/li&gt;
&lt;li&gt;dropRole&lt;/li&gt;
&lt;li&gt;dropUser&lt;/li&gt;
&lt;li&gt;grantRole&lt;/li&gt;
&lt;li&gt;revokeRole&lt;/li&gt;
&lt;li&gt;viewRole&lt;/li&gt;
&lt;li&gt;viewUser&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;userAdminAnyDatabase: 这个role与userAdmin支持的权限类似，但是它应用的对象是在整个集群中的数据库。这个role也提供了下面可以在集群中使用的操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;authSchemaUpgrade&lt;/li&gt;
&lt;li&gt;invalidateUserCache&lt;/li&gt;
&lt;li&gt;listDatabases&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;检查创建的用户&lt;/h3&gt;
&lt;p&gt;根据前面的命令，我们的应该有了一个admin的用户，执行命令检查下：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;show users
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们得到的输出是：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;admin.admin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;user&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;admin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;db&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;admin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;roles&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;quot;role&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;userAdminAnyDatabase&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;quot;db&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;admin&amp;quot;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同样的，我们也可以使用命令：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;  db.system.users.find()
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;重新启动mongodb with auth parameter&lt;/h3&gt;
&lt;p&gt;接下来，我们重新启动一个mongodb，使用--auth：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;docker run --volumes-from&lt;span class="o"&gt;=&lt;/span&gt;mongodb_data --name mongodb -d mongo --auth
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行下面的命令，检查鉴权是否可以成功：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;use admin
db.auth(&amp;quot;admin&amp;quot;,&amp;quot;admin&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行后返回的结果是：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这表示我们的执行用户鉴权是成功的&lt;/p&gt;
&lt;p&gt;到此，管理数据库用户的用户admin创建成功，接下来就是创建针对每个数据库的用户&lt;/p&gt;
&lt;h3&gt;创建数据库用户&lt;/h3&gt;
&lt;p&gt;我们先来执行下面的命令，创建一个数据库test：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;use test
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;创建test数据库的用户test,这里给的role是readWrite：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;db.createUser({user:&amp;quot;test&amp;quot;, pwd:&amp;quot;test&amp;quot;, roles:[{role:&amp;quot;readWrite&amp;quot;,db:&amp;quot;test&amp;quot;}]})
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们对用户进行下鉴权：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;db.auth(&amp;quot;test&amp;quot;,&amp;quot;test&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果返回为：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;那对test数据库创建的test用户是ok的，随后在test的数据库中，就可以使用test用户对此数据库进行读写。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;相关资源链接：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="http://docs.mongodb.org/manual/reference/built-in-roles"&gt;mongodb role相关内容参考&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Seanchann Zhou</dc:creator><pubDate>Fri, 03 Jul 2015 00:00:00 +0800</pubDate><guid>tag:seanchann.github.io,2015-07-03:mongodb-user-cn.html</guid><category>mongodb</category></item></channel></rss>